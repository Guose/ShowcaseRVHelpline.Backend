// <auto-generated />
using System;
using Helpline.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Helpline.DataAccess.Migrations
{
    [DbContext(typeof(HelplineContext))]
    [Migration("20240927045715_SeedInitalData")]
    partial class SeedInitalData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Helpline.Shared.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DealershipId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Address1 = "1606 Rock Creek Ridge Blvd SW",
                            City = "North Bend",
                            Country = "USA",
                            County = "King",
                            PostalCode = "98045",
                            State = "WA"
                        },
                        new
                        {
                            Id = -2,
                            Address1 = "11310 S Lake Stevens Rd",
                            City = "Lake Stevens",
                            Country = "USA",
                            County = "Snohomish",
                            PostalCode = "98258",
                            State = "WA"
                        },
                        new
                        {
                            Id = -3,
                            Address1 = "215 100th St SW D105",
                            City = "Everett",
                            Country = "USA",
                            County = "Snohomish",
                            PostalCode = "98240",
                            State = "WA"
                        },
                        new
                        {
                            Id = -4,
                            Address1 = "13102 43rd Ave NE",
                            City = "Marysville",
                            Country = "USA",
                            County = "Snohomish",
                            PostalCode = "98271",
                            State = "WA"
                        },
                        new
                        {
                            Id = -5,
                            Address1 = "12803 Hwy 99",
                            City = "Everett",
                            Country = "USA",
                            County = "Snohomish",
                            PostalCode = "98204",
                            State = "WA"
                        },
                        new
                        {
                            Id = -6,
                            Address1 = "1535 Walton Dr",
                            Country = "USA",
                            DealershipId = -1,
                            PostalCode = "98233"
                        },
                        new
                        {
                            Id = -7,
                            Address1 = "11572 Clear Creek Rd NW",
                            City = "Silverdale",
                            Country = "USA",
                            County = "Kitsap",
                            DealershipId = -2,
                            PostalCode = "98383",
                            State = "WA"
                        },
                        new
                        {
                            Id = -8,
                            Address1 = "4650 16th St E",
                            City = "Fife",
                            Country = "USA",
                            County = "Pierce",
                            DealershipId = -3,
                            PostalCode = "98424",
                            State = "WA"
                        },
                        new
                        {
                            Id = -9,
                            Address1 = "15855 Smokey Point Blvd",
                            City = "Marysville",
                            Country = "USA",
                            County = "Snohomish",
                            DealershipId = -4,
                            PostalCode = "98271",
                            State = "WA"
                        });
                });

            modelBuilder.Entity("Helpline.Shared.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemembered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Permssions")
                        .HasColumnType("tinyint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c26288f9-dd3a-48d6-b50f-58f7741732d5",
                            AccessFailedCount = 0,
                            AddressId = -1,
                            ConcurrencyStamp = "e83b733e-4946-48fa-a52e-9f172a8f1cf3",
                            Email = "justin@showcasemi.com",
                            EmailConfirmed = false,
                            FirstName = "Justin",
                            IsRemembered = false,
                            LastName = "Elder",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIk2i+wftXtKvSd1Nh82Dz1dseJVjvVHCLjLbBanyY/E8tCF5tlt0nggsIr9ZkqphA==",
                            Permssions = (byte)0,
                            PhoneNumber = "4259234362",
                            PhoneNumberConfirmed = false,
                            Role = (byte)1,
                            SecurityStamp = "ce1fca8e-6289-4731-b02c-a34407d074a5",
                            TwoFactorEnabled = false,
                            UserName = "guose"
                        },
                        new
                        {
                            Id = "bc5a677b-c200-408f-9baa-52d7258256ae",
                            AccessFailedCount = 0,
                            AddressId = -2,
                            ConcurrencyStamp = "999ec8b8-e97e-4171-90be-4c46ab24d989",
                            Email = "john@showcasemi.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            IsRemembered = false,
                            LastName = "Elder",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKYcBtgVjsiJ57p3JovwQWvehR8zJBIc1+Xh8k2aBnsHb86dUBwm82MBsWLCM+MbFg==",
                            Permssions = (byte)0,
                            PhoneNumber = "4253302032",
                            PhoneNumberConfirmed = false,
                            Role = (byte)8,
                            SecurityStamp = "9f8df77d-fa74-4e11-a57d-073e378343b4",
                            TwoFactorEnabled = false,
                            UserName = "JohnE"
                        },
                        new
                        {
                            Id = "b9ca97e2-1969-4181-b0b3-099c560a2125",
                            AccessFailedCount = 0,
                            AddressId = -3,
                            ConcurrencyStamp = "1dfc5207-ae4a-408e-9b9a-e7e40f9024fb",
                            Email = "keith.rvtech@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Keith",
                            IsRemembered = false,
                            LastName = "McPherson",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL8JzBCDFK46D2aWkaoFWHfVAC+Zxx46P1ZKMyc1gDOUVuqriVRTkYwUJAliiXxayQ==",
                            Permssions = (byte)0,
                            PhoneNumber = "3606319123",
                            PhoneNumberConfirmed = false,
                            Role = (byte)5,
                            SecurityStamp = "b2e8a89f-bc07-4070-ac36-ce86b9a503a7",
                            TwoFactorEnabled = false,
                            UserName = "KeithM"
                        },
                        new
                        {
                            Id = "45a55c7e-de7a-41ab-aceb-bc3d1701ccf1",
                            AccessFailedCount = 0,
                            AddressId = -4,
                            ConcurrencyStamp = "12505b18-5957-4579-93e7-cf7b1c091d90",
                            Email = "eric@showcaservhub.com",
                            EmailConfirmed = false,
                            FirstName = "Eric",
                            IsRemembered = false,
                            LastName = "Shaw",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENkxw5GTLknA9nHuC95VEqXZQvbTV/OPX+jiXoMAJpahaC+B9AVCxNhwlFurB05LVQ==",
                            Permssions = (byte)0,
                            PhoneNumber = "4253087638",
                            PhoneNumberConfirmed = false,
                            Role = (byte)3,
                            SecurityStamp = "c038cf83-2ce7-4dd3-ae41-73aba47aef99",
                            TwoFactorEnabled = false,
                            UserName = "EricS"
                        },
                        new
                        {
                            Id = "69f01f45-545b-4e46-820f-2ace9794875f",
                            AccessFailedCount = 0,
                            AddressId = -5,
                            ConcurrencyStamp = "fad6b3dc-e306-48a1-b515-e921237e2ea0",
                            Email = "jacob@skyautorepair.com",
                            EmailConfirmed = false,
                            FirstName = "Jacob",
                            IsRemembered = false,
                            LastName = "Skys",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOti+pAY8fSm9hzMuVTo5MSf58AlbFSjkYEEpi11dU5ijM5iLBRHRFMIEudotRtcOQ==",
                            Permssions = (byte)0,
                            PhoneNumber = "4253068730",
                            PhoneNumberConfirmed = false,
                            Role = (byte)4,
                            SecurityStamp = "427f7835-2e8d-4b85-85b3-bc603b11644b",
                            TwoFactorEnabled = false,
                            UserName = "Jacob_Skys"
                        },
                        new
                        {
                            Id = "4c57ce2c-78cc-4d35-9ae7-bf29b6ce2a46",
                            AccessFailedCount = 0,
                            AddressId = -3,
                            ConcurrencyStamp = "42540be8-e60c-43d3-9db6-85c1acb3a0d9",
                            Email = "nicole@showcaservhub.com",
                            EmailConfirmed = false,
                            FirstName = "Nicole",
                            IsRemembered = false,
                            LastName = "McPherson",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEN+WwQIU9ltt0/SJLb3gqaUFAe0bZI6ZqTWUAP0qJ2AyPnc9hlVS01mw8RZwUdI3Bg==",
                            Permssions = (byte)0,
                            PhoneNumber = "3605728448",
                            PhoneNumberConfirmed = false,
                            Role = (byte)2,
                            SecurityStamp = "1c6f29ad-c3b2-4b2e-abce-d19e74552954",
                            TwoFactorEnabled = false,
                            UserName = "NicoleM"
                        });
                });

            modelBuilder.Entity("Helpline.Shared.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SubscriptionStatus")
                        .HasColumnType("bit");

                    b.Property<byte>("SubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Helpline.Shared.Models.CustomerVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BedTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chassis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FurnaceDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneratorDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneratorHours")
                        .HasColumnType("int");

                    b.Property<bool>("HasAwning")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCDPlayer")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDVDPlayer")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExteriorShower")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFireExtingusher")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFireplace")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFurnace")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGenerator")
                        .HasColumnType("bit");

                    b.Property<bool>("HasInteriorShower")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMicrowave")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNavigation")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPropane")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRange")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRearVisionCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRefrigerator")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRoofAC")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSlideout")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSnowChains")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTV")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWaterHeater")
                        .HasColumnType("bit");

                    b.Property<bool>("HasiPodDocking")
                        .HasColumnType("bit");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Odometer")
                        .HasColumnType("float");

                    b.Property<string>("PropaneDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RangeDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefrigeratorDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatbeltsQty")
                        .HasColumnType("int");

                    b.Property<int>("Sleeps")
                        .HasColumnType("int");

                    b.Property<string>("SlideoutDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TVDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterHeaterDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerVehicles");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Dealership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealershipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Dealerships");
                });

            modelBuilder.Entity("Helpline.Shared.Models.DealershipContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DealershipId")
                        .HasColumnType("int");

                    b.Property<byte>("Department")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DealershipId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("DealershipContacts");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Helpline.Shared.Models.EmployeeService", b =>
                {
                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("EmployeeService");
                });

            modelBuilder.Entity("Helpline.Shared.Models.KnowledgeBaseLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ServiceType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoDIY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KnowledgeBaseLibraries");
                });

            modelBuilder.Entity("Helpline.Shared.Models.KnowledgeBaseTag", b =>
                {
                    b.Property<int?>("KnowledgeBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("KnowledgeBaseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("KnowledgeBaseTags");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVCheckout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlackWater")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("int");

                    b.Property<int>("GrayWater")
                        .HasColumnType("int");

                    b.Property<bool>("IsACChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAwningChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnaceChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHotwaterChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMicrowaveChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefrigeratorFreezerChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRenterTrained")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignalsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlideoutChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoveAndOvenChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTiresChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Propane")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CheckoutId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckoutId")
                        .IsUnique()
                        .HasFilter("[CheckoutId] IS NOT NULL");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RenterId");

                    b.HasIndex("ReturnId")
                        .IsUnique()
                        .HasFilter("[ReturnId] IS NOT NULL");

                    b.HasIndex("VehicleId");

                    b.ToTable("RVRentals");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVRenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeatRenter")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RentalPortal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RVRenters");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlackWater")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("int");

                    b.Property<int>("GrayWater")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceClaimDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceClaimPhotos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsACChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAwningChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckInComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnaceChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHotwaterChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsuranceClaim")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMicrowaveChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefrigeratorFreezerChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignalsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlideoutChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoveAndOvenChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTiresChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotosReturn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Propane")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CostPercent")
                        .HasPrecision(5, 1)
                        .HasColumnType("decimal(5,1)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossProfitPercent")
                        .HasPrecision(5, 1)
                        .HasColumnType("decimal(5,1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetailPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RVServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(768),
                            Description = "Top off fluids, clean terminals and posts, test amps/volts, and apply anti-corrosive (up to 3 batteries).",
                            Frequency = "As needed",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 135.00m,
                            Service = "Battery ServiceType",
                            ServiceCode = "M00001",
                            ServiceMethod = "Mobile",
                            UOM = "3 batteries"
                        },
                        new
                        {
                            Id = 2,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(771),
                            Description = "Clean and check battery and connections; visual inspection of exhaust system; clean spark arrester; replace air filter, change oil and filter; perform load test; replace fuel filter as necessary.",
                            Frequency = "150 hours",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 240.00m,
                            Service = "Generator Tuneups",
                            ServiceCode = "M00002",
                            ServiceMethod = "Mobile",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 3,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(772),
                            Description = "Lube chassis, check transmission fluids, battery water level, check/add coolant level; inspect wiper blades, and top off washer fluid.",
                            Frequency = "5000 miles or 6 months",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 160.00m,
                            Service = "Oil Changes",
                            ServiceCode = "M00003",
                            ServiceMethod = "Mobile",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 4,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(773),
                            Description = "Drain fresh water tank and water heater; blow out water lines with compressed air, including toilet, shower and sinks; fill P-Traps with anti-freeze; pump anti-freeze through water lines with water heater bypass; includes up to 2 gallons of anti-freeze.",
                            Frequency = "Winter",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 105.00m,
                            Service = "Winterization",
                            ServiceCode = "M00004",
                            ServiceMethod = "Mobile",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 5,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(773),
                            Description = "Deep cleaning with disinfectant, including cabinets, microwave, refrigerator, toilet & shower, range/oven; clean carpets & upholstery; clean dash & windows; and check for leaks.",
                            Frequency = "As needed",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 475.00m,
                            Service = "Detail - Interior",
                            ServiceCode = "M00005",
                            ServiceMethod = "Mobile",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 6,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(776),
                            Description = "Pressure wash; buff all four sides, using polishing compound; wax all four sides for fiberglass gel coats; clean windows, tires, and chrome.",
                            Frequency = "As needed",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 675.00m,
                            Service = "Detail - Exterior",
                            ServiceCode = "M00006",
                            ServiceMethod = "Mobile",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 7,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(776),
                            Description = "Full exterior and interior detail.",
                            Frequency = "As needed",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 1099.00m,
                            Service = "Detail - Full",
                            ServiceCode = "M00007",
                            ServiceMethod = "Mobile",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 8,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(777),
                            Description = "Clean roof with specially designed cleaning agents and apply UV-Blocking treatment to protect roof, and check for leaks & seal if necessary",
                            Frequency = "Annual",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 500.00m,
                            Service = "Roof Maintenance",
                            ServiceCode = "M00008",
                            ServiceMethod = "Mobile",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 9,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(777),
                            Description = "Perform annually for operating safety and fuel efficiency. Clean main burner orifice; clean blower wheel; clean/Inspect/Adjust electrode assembly; test module board/inspect and clean board contacts; clean and inspect combustion chamber; inspect fan motor; clean and inspect vent tubes and outer casing; reassemble furnace using new gaskets.",
                            Frequency = "Annual",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 200.00m,
                            Service = "Furnace ServiceType",
                            ServiceCode = "B00001",
                            ServiceMethod = "Both",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 10,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(778),
                            Description = "Recommended annually for operating safety and fuel efficiency. Check condition of anode rod; check relief valve; adjust burners and electrodes; check thermocouple; check module",
                            Frequency = "Annual",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 105.00m,
                            Service = "Water Heater ServiceType",
                            ServiceCode = "B00002",
                            ServiceMethod = "Both",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 11,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(779),
                            Description = "Recommended annually to maintain trouble-free operation and long life. Verify unit is air tight in compartment; refrigerator is properly vented (roof and sidewall); clean and adjust burner and orifice; inspect and test all door seals; check LP pressure and proper voltage; clean roof vent and check baffle.",
                            Frequency = "Annual",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 125.00m,
                            Service = "Refrigerator ServiceType",
                            ServiceCode = "B00003",
                            ServiceMethod = "Both",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 12,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(779),
                            Description = "Recommended annually to improve performance and operating efficiency. Examine shroud for cracks and damage; check compressor voltage; check compressor amperage; remove and clean A/C filter; clean and unclog A/C roof drains; check air temperature drop across the evaporator coil.",
                            Frequency = "Annual",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 125.00m,
                            Service = "Air Conditioner ServiceType",
                            ServiceCode = "B00004",
                            ServiceMethod = "Both",
                            UOM = "Each"
                        },
                        new
                        {
                            Id = 13,
                            CostPercent = 65m,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 752, DateTimeKind.Utc).AddTicks(780),
                            Description = "Perform annually to help keep appliances and accessories operating efficiently and provide trouble-free travels. Check all of the following for proper operation: antennas, water heater, awnings, furnace, refrigerator, TVs, DVD players, range/oven, washer/dryer, roof A/Cs.",
                            Frequency = "Annual",
                            GrossProfitPercent = 35m,
                            IsActive = true,
                            RetailPrice = 200.00m,
                            Service = "Pre-Delivery Inspection",
                            ServiceCode = "S00001",
                            ServiceMethod = "Shop",
                            UOM = "Each"
                        });
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceCaseCallId")
                        .HasColumnType("int");

                    b.Property<int>("Sev")
                        .HasColumnType("int");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerVehicleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceCaseCallId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("ServiceCases");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCaseCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("CallType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Caller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KnowledgeBaseLibraryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResolveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceCaseId")
                        .HasColumnType("int");

                    b.Property<byte>("ServiceType")
                        .HasColumnType("tinyint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeBaseLibraryId");

                    b.HasIndex("ServiceCaseId");

                    b.ToTable("ServiceCaseCalls");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCaseCallServiceType", b =>
                {
                    b.Property<int?>("ServiceCaseCallId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("ServiceCaseCallId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceCaseCallServiceTypes");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCaseTag", b =>
                {
                    b.Property<int?>("ServiceCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ServiceCaseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ServiceCaseTags");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ServiceType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<byte>("SubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 751, DateTimeKind.Utc).AddTicks(8466),
                            IsActive = true,
                            TagName = "How to"
                        },
                        new
                        {
                            Id = -2,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 751, DateTimeKind.Utc).AddTicks(8471),
                            IsActive = true,
                            TagName = "Troubleshooting"
                        },
                        new
                        {
                            Id = -3,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 751, DateTimeKind.Utc).AddTicks(8472),
                            IsActive = true,
                            TagName = "Generator"
                        },
                        new
                        {
                            Id = -4,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 751, DateTimeKind.Utc).AddTicks(8473),
                            IsActive = true,
                            TagName = "Tires"
                        },
                        new
                        {
                            Id = -5,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 751, DateTimeKind.Utc).AddTicks(8473),
                            IsActive = true,
                            TagName = "Water Heater"
                        },
                        new
                        {
                            Id = -6,
                            CreatedOn = new DateTime(2024, 9, 27, 4, 57, 13, 751, DateTimeKind.Utc).AddTicks(8476),
                            IsActive = true,
                            TagName = "Electrical"
                        });
                });

            modelBuilder.Entity("Helpline.Shared.Models.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsW9OnFile")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("Helpline.Shared.Models.TechnicianService", b =>
                {
                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("TechnicianId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TechnicianServices");
                });

            modelBuilder.Entity("Helpline.Shared.Models.VehicleRvRenter", b =>
                {
                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("RenterId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRvRenters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ServiceType");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Helpline.Shared.Models.ApplicationUser", b =>
                {
                    b.HasOne("Helpline.Shared.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Customer", b =>
                {
                    b.HasOne("Helpline.Shared.Models.Subscription", "Subscription")
                        .WithMany("Customers")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Helpline.Shared.Models.ApplicationUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Helpline.Shared.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Shared.Models.CustomerVehicle", b =>
                {
                    b.HasOne("Helpline.Shared.Models.Customer", "Customer")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Dealership", b =>
                {
                    b.HasOne("Helpline.Shared.Models.Address", "Address")
                        .WithOne("Dealership")
                        .HasForeignKey("Helpline.Shared.Models.Dealership", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Helpline.Shared.Models.DealershipContact", b =>
                {
                    b.HasOne("Helpline.Shared.Models.Dealership", "Dealership")
                        .WithMany("DealershipContacts")
                        .HasForeignKey("DealershipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.ApplicationUser", "User")
                        .WithOne("DealershipContact")
                        .HasForeignKey("Helpline.Shared.Models.DealershipContact", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Dealership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Employee", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ApplicationUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Helpline.Shared.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Shared.Models.EmployeeService", b =>
                {
                    b.HasOne("Helpline.Shared.Models.Employee", "Employee")
                        .WithMany("EmployeeServices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.ServiceClass", "ServiceType")
                        .WithMany("EmployeeServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Helpline.Shared.Models.KnowledgeBaseTag", b =>
                {
                    b.HasOne("Helpline.Shared.Models.KnowledgeBaseLibrary", "KnowledgeBaseLibrary")
                        .WithMany("KnowledgeBaseTags")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.Tag", "Tag")
                        .WithMany("KnowledgeBaseTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KnowledgeBaseLibrary");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVRental", b =>
                {
                    b.HasOne("Helpline.Shared.Models.RVCheckout", "Checkout")
                        .WithOne("Rental")
                        .HasForeignKey("Helpline.Shared.Models.RVRental", "CheckoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Helpline.Shared.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Helpline.Shared.Models.RVRenter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("Helpline.Shared.Models.RVReturn", "Return")
                        .WithOne("Rental")
                        .HasForeignKey("Helpline.Shared.Models.RVRental", "ReturnId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Helpline.Shared.Models.CustomerVehicle", "Vehicle")
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Checkout");

                    b.Navigation("Employee");

                    b.Navigation("Renter");

                    b.Navigation("Return");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVRenter", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCase", b =>
                {
                    b.HasOne("Helpline.Shared.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Helpline.Shared.Models.CustomerVehicle", "CustomerVehicle")
                        .WithMany("ServiceCases")
                        .HasForeignKey("CustomerVehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Helpline.Shared.Models.Employee", "Employee")
                        .WithMany("ServiceCases")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.ServiceCaseCall", null)
                        .WithMany("RelatedServiceCases")
                        .HasForeignKey("ServiceCaseCallId");

                    b.HasOne("Helpline.Shared.Models.Technician", "Technician")
                        .WithMany("ServiceCases")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerVehicle");

                    b.Navigation("Employee");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCaseCall", b =>
                {
                    b.HasOne("Helpline.Shared.Models.KnowledgeBaseLibrary", "KnowledgeBaseLibrary")
                        .WithMany("ServiceCaseCalls")
                        .HasForeignKey("KnowledgeBaseLibraryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.ServiceCase", "ServiceCase")
                        .WithMany("ServiceCaseCalls")
                        .HasForeignKey("ServiceCaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KnowledgeBaseLibrary");

                    b.Navigation("ServiceCase");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCaseCallServiceType", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ServiceCaseCall", "ServiceCaseCall")
                        .WithMany("ServiceCaseCallServiceTypes")
                        .HasForeignKey("ServiceCaseCallId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.ServiceClass", "ServiceType")
                        .WithMany("ServiceCaseCallServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceCaseCall");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCaseTag", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ServiceCase", "ServiceCase")
                        .WithMany("ServiceCaseTags")
                        .HasForeignKey("ServiceCaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.Tag", "Tag")
                        .WithMany("ServiceCaseTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceCase");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Technician", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ApplicationUser", "User")
                        .WithOne("Technician")
                        .HasForeignKey("Helpline.Shared.Models.Technician", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Shared.Models.TechnicianService", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ServiceClass", "ServiceType")
                        .WithMany("TechnicianServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.Technician", "Technician")
                        .WithMany("TechnicianServices")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceType");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Helpline.Shared.Models.VehicleRvRenter", b =>
                {
                    b.HasOne("Helpline.Shared.Models.RVRenter", "Renter")
                        .WithMany("VehicleRvRenters")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.CustomerVehicle", "Vehicle")
                        .WithMany("VehicleRvRenters")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Renter");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helpline.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Helpline.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Helpline.Shared.Models.Address", b =>
                {
                    b.Navigation("Dealership");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ApplicationUser", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("DealershipContact");

                    b.Navigation("Employee");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Customer", b =>
                {
                    b.Navigation("CustomerVehicles");
                });

            modelBuilder.Entity("Helpline.Shared.Models.CustomerVehicle", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("ServiceCases");

                    b.Navigation("VehicleRvRenters");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Dealership", b =>
                {
                    b.Navigation("DealershipContacts");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Employee", b =>
                {
                    b.Navigation("EmployeeServices");

                    b.Navigation("ServiceCases");
                });

            modelBuilder.Entity("Helpline.Shared.Models.KnowledgeBaseLibrary", b =>
                {
                    b.Navigation("KnowledgeBaseTags");

                    b.Navigation("ServiceCaseCalls");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVCheckout", b =>
                {
                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVRenter", b =>
                {
                    b.Navigation("VehicleRvRenters");
                });

            modelBuilder.Entity("Helpline.Shared.Models.RVReturn", b =>
                {
                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCase", b =>
                {
                    b.Navigation("ServiceCaseCalls");

                    b.Navigation("ServiceCaseTags");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceCaseCall", b =>
                {
                    b.Navigation("RelatedServiceCases");

                    b.Navigation("ServiceCaseCallServiceTypes");
                });

            modelBuilder.Entity("Helpline.Shared.Models.ServiceClass", b =>
                {
                    b.Navigation("EmployeeServices");

                    b.Navigation("ServiceCaseCallServiceTypes");

                    b.Navigation("TechnicianServices");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Subscription", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Tag", b =>
                {
                    b.Navigation("KnowledgeBaseTags");

                    b.Navigation("ServiceCaseTags");
                });

            modelBuilder.Entity("Helpline.Shared.Models.Technician", b =>
                {
                    b.Navigation("ServiceCases");

                    b.Navigation("TechnicianServices");
                });
#pragma warning restore 612, 618
        }
    }
}
