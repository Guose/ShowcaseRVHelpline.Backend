// <auto-generated />
using System;
using Helpline.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Helpline.DataAccess.Migrations
{
    [DbContext(typeof(HelplineContext))]
    [Migration("20240928201411_SeedServCallsRenterRentals")]
    partial class SeedServCallsRenterRentals
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Helpline.Common.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DealershipId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Helpline.Common.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemembered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Permssions")
                        .HasColumnType("tinyint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Helpline.Common.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SubscriptionStatus")
                        .HasColumnType("bit");

                    b.Property<byte>("SubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Helpline.Common.Models.CustomerVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BedTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chassis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FurnaceDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneratorDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneratorHours")
                        .HasColumnType("int");

                    b.Property<bool>("HasAwning")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCDPlayer")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDVDPlayer")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExteriorShower")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFireExtingusher")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFireplace")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFurnace")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGenerator")
                        .HasColumnType("bit");

                    b.Property<bool>("HasInteriorShower")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMicrowave")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNavigation")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPropane")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRange")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRearVisionCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRefrigerator")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRoofAC")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSlideout")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSnowChains")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTV")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWaterHeater")
                        .HasColumnType("bit");

                    b.Property<bool>("HasiPodDocking")
                        .HasColumnType("bit");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Odometer")
                        .HasColumnType("float");

                    b.Property<string>("PropaneDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RangeDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefrigeratorDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatbeltsQty")
                        .HasColumnType("int");

                    b.Property<int>("Sleeps")
                        .HasColumnType("int");

                    b.Property<string>("SlideoutDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TVDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterHeaterDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerVehicles");
                });

            modelBuilder.Entity("Helpline.Common.Models.Dealership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealershipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Dealerships");
                });

            modelBuilder.Entity("Helpline.Common.Models.DealershipContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DealershipId")
                        .HasColumnType("int");

                    b.Property<byte>("Department")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DealershipId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("DealershipContacts");
                });

            modelBuilder.Entity("Helpline.Common.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Helpline.Common.Models.EmployeeService", b =>
                {
                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("EmployeeService");
                });

            modelBuilder.Entity("Helpline.Common.Models.KnowledgeBaseLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ServiceClass")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoDIY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KnowledgeBaseLibraries");
                });

            modelBuilder.Entity("Helpline.Common.Models.KnowledgeBaseTag", b =>
                {
                    b.Property<int?>("KnowledgeBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("KnowledgeBaseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("KnowledgeBaseTags");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVCheckout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlackWater")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FreshWater")
                        .HasColumnType("int");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("int");

                    b.Property<int>("GrayWater")
                        .HasColumnType("int");

                    b.Property<bool>("IsACChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAwningChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnaceChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHotwaterChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMicrowaveChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefrigeratorFreezerChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRenterTrained")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignalsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlideoutChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoveAndOvenChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTiresChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Propane")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalId")
                        .IsUnique();

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CheckoutId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RenterId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RVRentals");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CheckoutId = -1,
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4643),
                            EmployeeId = -1,
                            IsActive = false,
                            RentalEnd = new DateTime(2023, 12, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4625),
                            RentalStart = new DateTime(2023, 11, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4625),
                            RentalStatus = 3,
                            RenterId = -1,
                            ReturnId = -1,
                            VehicleId = -1
                        },
                        new
                        {
                            Id = -2,
                            CheckoutId = -2,
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4657),
                            EmployeeId = -1,
                            IsActive = false,
                            RentalEnd = new DateTime(2024, 10, 18, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4655),
                            RentalStart = new DateTime(2024, 9, 18, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4655),
                            RentalStatus = 2,
                            RenterId = -2,
                            VehicleId = -3
                        },
                        new
                        {
                            Id = -3,
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4663),
                            EmployeeId = -1,
                            IsActive = false,
                            RentalEnd = new DateTime(2025, 1, 27, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4660),
                            RentalStart = new DateTime(2024, 12, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(4660),
                            RentalStatus = 1,
                            RenterId = -3,
                            VehicleId = -2
                        });
                });

            modelBuilder.Entity("Helpline.Common.Models.RVRenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeatRenter")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RentalPortal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RVRenters");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(3438),
                            FullName = "Paul Csicsila",
                            IsActive = true,
                            IsRepeatRenter = false,
                            RentalPortal = "RV Share"
                        },
                        new
                        {
                            Id = -2,
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(3461),
                            FullName = "Robert Jensen",
                            IsActive = true,
                            IsRepeatRenter = true,
                            RentalPortal = "Good Sams"
                        },
                        new
                        {
                            Id = -3,
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(3464),
                            FullName = "Erica Rayter",
                            IsActive = true,
                            IsRepeatRenter = false,
                            RentalPortal = "Outdoorsy"
                        });
                });

            modelBuilder.Entity("Helpline.Common.Models.RVReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlackWater")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("int");

                    b.Property<int>("GrayWater")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceClaimDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceClaimPhotos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsACChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAwningChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckInComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnaceChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHotwaterChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsuranceClaim")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInteriorCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMicrowaveChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefrigeratorFreezerChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignalsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlideoutChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoveAndOvenChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTiresChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotosReturn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Propane")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalId")
                        .IsUnique();

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CostPercent")
                        .HasPrecision(5, 1)
                        .HasColumnType("decimal(5,1)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossProfitPercent")
                        .HasPrecision(5, 1)
                        .HasColumnType("decimal(5,1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetailPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RVServices");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceCaseCallId")
                        .HasColumnType("int");

                    b.Property<int>("Sev")
                        .HasColumnType("int");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerVehicleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceCaseCallId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("ServiceCases");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCaseCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("CallType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Caller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KnowledgeBaseLibraryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResolveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceCaseId")
                        .HasColumnType("int");

                    b.Property<byte>("ServiceClass")
                        .HasColumnType("tinyint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeBaseLibraryId");

                    b.HasIndex("ServiceCaseId");

                    b.ToTable("ServiceCaseCalls");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CallType = (byte)3,
                            Caller = "John Doe",
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(2186),
                            IsActive = false,
                            KnowledgeBaseLibraryId = -1,
                            ResolveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceCaseId = -1,
                            ServiceType = (byte)10,
                            Status = 0
                        },
                        new
                        {
                            Id = -2,
                            CallType = (byte)4,
                            Caller = "Jane Doe",
                            CreatedOn = new DateTime(2024, 9, 28, 13, 14, 11, 5, DateTimeKind.Local).AddTicks(2245),
                            IsActive = false,
                            KnowledgeBaseLibraryId = -2,
                            ResolveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceCaseId = -2,
                            ServiceType = (byte)18,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCaseCallServiceType", b =>
                {
                    b.Property<int?>("ServiceCaseCallId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceClassId")
                        .HasColumnType("int");

                    b.HasKey("ServiceCaseCallId", "ServiceClassId");

                    b.HasIndex("ServiceClassId");

                    b.ToTable("ServiceCaseCallServiceClasses");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCaseTag", b =>
                {
                    b.Property<int?>("ServiceCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ServiceCaseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ServiceCaseTags");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ServiceClass")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("ServiceClasses");
                });

            modelBuilder.Entity("Helpline.Common.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<byte>("SubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Helpline.Common.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Helpline.Common.Models.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsW9OnFile")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("Helpline.Common.Models.TechnicianService", b =>
                {
                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("TechnicianId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TechnicianServices");
                });

            modelBuilder.Entity("Helpline.Common.Models.VehicleRvRenter", b =>
                {
                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("RenterId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRvRenters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Helpline.Common.Models.ApplicationUser", b =>
                {
                    b.HasOne("Helpline.Common.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Helpline.Common.Models.Customer", b =>
                {
                    b.HasOne("Helpline.Common.Models.Subscription", "Subscription")
                        .WithMany("Customers")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.ApplicationUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Helpline.Common.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Common.Models.CustomerVehicle", b =>
                {
                    b.HasOne("Helpline.Common.Models.Customer", "Customer")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Helpline.Common.Models.Dealership", b =>
                {
                    b.HasOne("Helpline.Common.Models.Address", "Address")
                        .WithOne("Dealership")
                        .HasForeignKey("Helpline.Common.Models.Dealership", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Helpline.Common.Models.DealershipContact", b =>
                {
                    b.HasOne("Helpline.Common.Models.Dealership", "Dealership")
                        .WithMany("DealershipContacts")
                        .HasForeignKey("DealershipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.ApplicationUser", "User")
                        .WithOne("DealershipContact")
                        .HasForeignKey("Helpline.Common.Models.DealershipContact", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Dealership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Common.Models.Employee", b =>
                {
                    b.HasOne("Helpline.Common.Models.ApplicationUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Helpline.Common.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Common.Models.EmployeeService", b =>
                {
                    b.HasOne("Helpline.Common.Models.Employee", "Employee")
                        .WithMany("EmployeeServices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.ServiceClass", "Service")
                        .WithMany("EmployeeServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Helpline.Common.Models.KnowledgeBaseTag", b =>
                {
                    b.HasOne("Helpline.Common.Models.KnowledgeBaseLibrary", "KnowledgeBaseLibrary")
                        .WithMany("KnowledgeBaseTags")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.Tag", "Tag")
                        .WithMany("KnowledgeBaseTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KnowledgeBaseLibrary");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVCheckout", b =>
                {
                    b.HasOne("Helpline.Common.Models.RVRental", "Rental")
                        .WithOne("Checkout")
                        .HasForeignKey("Helpline.Common.Models.RVCheckout", "RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVRental", b =>
                {
                    b.HasOne("Helpline.Common.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Helpline.Common.Models.RVRenter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("Helpline.Common.Models.CustomerVehicle", "Vehicle")
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Employee");

                    b.Navigation("Renter");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVRenter", b =>
                {
                    b.HasOne("Helpline.Common.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVReturn", b =>
                {
                    b.HasOne("Helpline.Common.Models.RVRental", "Rental")
                        .WithOne("Return")
                        .HasForeignKey("Helpline.Common.Models.RVReturn", "RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCase", b =>
                {
                    b.HasOne("Helpline.Common.Models.Customer", "Customer")
                        .WithMany("ServiceCases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.CustomerVehicle", "CustomerVehicle")
                        .WithMany("ServiceCases")
                        .HasForeignKey("CustomerVehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.Employee", "Employee")
                        .WithMany("ServiceCases")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.ServiceCaseCall", null)
                        .WithMany("RelatedServiceCases")
                        .HasForeignKey("ServiceCaseCallId");

                    b.HasOne("Helpline.Common.Models.Technician", "Technician")
                        .WithMany("ServiceCases")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerVehicle");

                    b.Navigation("Employee");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCaseCall", b =>
                {
                    b.HasOne("Helpline.Common.Models.KnowledgeBaseLibrary", "KnowledgeBaseLibrary")
                        .WithMany("ServiceCaseCalls")
                        .HasForeignKey("KnowledgeBaseLibraryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.ServiceCase", "ServiceCase")
                        .WithMany("ServiceCaseCalls")
                        .HasForeignKey("ServiceCaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KnowledgeBaseLibrary");

                    b.Navigation("ServiceCase");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCaseCallServiceType", b =>
                {
                    b.HasOne("Helpline.Common.Models.ServiceCaseCall", "ServiceCaseCall")
                        .WithMany("ServiceCaseCallServiceClasses")
                        .HasForeignKey("ServiceCaseCallId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.ServiceClass", "ServiceClass")
                        .WithMany("ServiceCaseCallServiceClasses")
                        .HasForeignKey("ServiceClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceCaseCall");

                    b.Navigation("ServiceClass");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCaseTag", b =>
                {
                    b.HasOne("Helpline.Common.Models.ServiceCase", "ServiceCase")
                        .WithMany("ServiceCaseTags")
                        .HasForeignKey("ServiceCaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.Tag", "Tag")
                        .WithMany("ServiceCaseTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceCase");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Helpline.Common.Models.Technician", b =>
                {
                    b.HasOne("Helpline.Common.Models.ApplicationUser", "User")
                        .WithOne("Technician")
                        .HasForeignKey("Helpline.Common.Models.Technician", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpline.Common.Models.TechnicianService", b =>
                {
                    b.HasOne("Helpline.Common.Models.ServiceClass", "Service")
                        .WithMany("TechnicianServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.Technician", "Technician")
                        .WithMany("TechnicianServices")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Helpline.Common.Models.VehicleRvRenter", b =>
                {
                    b.HasOne("Helpline.Common.Models.RVRenter", "Renter")
                        .WithMany("VehicleRvRenters")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.CustomerVehicle", "Vehicle")
                        .WithMany("VehicleRvRenters")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Renter");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Helpline.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Helpline.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helpline.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Helpline.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Helpline.Common.Models.Address", b =>
                {
                    b.Navigation("Dealership");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Helpline.Common.Models.ApplicationUser", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("DealershipContact");

                    b.Navigation("Employee");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Helpline.Common.Models.Customer", b =>
                {
                    b.Navigation("CustomerVehicles");

                    b.Navigation("ServiceCases");
                });

            modelBuilder.Entity("Helpline.Common.Models.CustomerVehicle", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("ServiceCases");

                    b.Navigation("VehicleRvRenters");
                });

            modelBuilder.Entity("Helpline.Common.Models.Dealership", b =>
                {
                    b.Navigation("DealershipContacts");
                });

            modelBuilder.Entity("Helpline.Common.Models.Employee", b =>
                {
                    b.Navigation("EmployeeServices");

                    b.Navigation("ServiceCases");
                });

            modelBuilder.Entity("Helpline.Common.Models.KnowledgeBaseLibrary", b =>
                {
                    b.Navigation("KnowledgeBaseTags");

                    b.Navigation("ServiceCaseCalls");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVRental", b =>
                {
                    b.Navigation("Checkout");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Helpline.Common.Models.RVRenter", b =>
                {
                    b.Navigation("VehicleRvRenters");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCase", b =>
                {
                    b.Navigation("ServiceCaseCalls");

                    b.Navigation("ServiceCaseTags");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceCaseCall", b =>
                {
                    b.Navigation("RelatedServiceCases");

                    b.Navigation("ServiceCaseCallServiceClasses");
                });

            modelBuilder.Entity("Helpline.Common.Models.ServiceClass", b =>
                {
                    b.Navigation("EmployeeServices");

                    b.Navigation("ServiceCaseCallServiceClasses");

                    b.Navigation("TechnicianServices");
                });

            modelBuilder.Entity("Helpline.Common.Models.Subscription", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Helpline.Common.Models.Tag", b =>
                {
                    b.Navigation("KnowledgeBaseTags");

                    b.Navigation("ServiceCaseTags");
                });

            modelBuilder.Entity("Helpline.Common.Models.Technician", b =>
                {
                    b.Navigation("ServiceCases");

                    b.Navigation("TechnicianServices");
                });
#pragma warning restore 612, 618
        }
    }
}
